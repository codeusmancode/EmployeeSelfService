package essp.usg.model.entity_objects;

import java.math.BigDecimal;
import java.math.BigInteger;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;

import oracle.ods.virtualization.engine.backend.db.DBConnectionPool;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Mar 17 11:06:01 PKT 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EOLeavesPortalImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        SrNo,
        EmpId,
        EmpCode,
        Leavetype,
        FromDate,
        ToDate,
        CreatedBy,
        CreationDate,
        TotLvs,
        Approved,
        Remarks,
        DeptId,
        Cancel,
        UpdatedDate,
        VersionNumber;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SRNO = AttributesEnum.SrNo.index();
    public static final int EMPID = AttributesEnum.EmpId.index();
    public static final int EMPCODE = AttributesEnum.EmpCode.index();
    public static final int LEAVETYPE = AttributesEnum.Leavetype.index();
    public static final int FROMDATE = AttributesEnum.FromDate.index();
    public static final int TODATE = AttributesEnum.ToDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int TOTLVS = AttributesEnum.TotLvs.index();
    public static final int APPROVED = AttributesEnum.Approved.index();
    public static final int REMARKS = AttributesEnum.Remarks.index();
    public static final int DEPTID = AttributesEnum.DeptId.index();
    public static final int CANCEL = AttributesEnum.Cancel.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();
    public static final int VERSIONNUMBER = AttributesEnum.VersionNumber.index();

    /**
     * This is the default constructor (do not remove).
     */
    public EOLeavesPortalImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("essp.usg.model.entity_objects.EOLeavesPortal");
    }


    /**
     * Gets the attribute value for SrNo, using the alias name SrNo.
     * @return the value of SrNo
     */
    public Long getSrNo() {
        return (Long) getAttributeInternal(SRNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for SrNo.
     * @param value value to set the SrNo
     */
    public void setSrNo(Long value) {
        setAttributeInternal(SRNO, value);
    }

    /**
     * Gets the attribute value for EmpId, using the alias name EmpId.
     * @return the value of EmpId
     */
    public BigInteger getEmpId() {
        return (BigInteger) getAttributeInternal(EMPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmpId.
     * @param value value to set the EmpId
     */
    public void setEmpId(BigInteger value) {
        setAttributeInternal(EMPID, value);
    }

    /**
     * Gets the attribute value for EmpCode, using the alias name EmpCode.
     * @return the value of EmpCode
     */
    public Long getEmpCode() {
        return (Long) getAttributeInternal(EMPCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmpCode.
     * @param value value to set the EmpCode
     */
    public void setEmpCode(Long value) {
        setAttributeInternal(EMPCODE, value);
    }

    /**
     * Gets the attribute value for Leavetype, using the alias name Leavetype.
     * @return the value of Leavetype
     */
    public String getLeavetype() {
        return (String) getAttributeInternal(LEAVETYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Leavetype.
     * @param value value to set the Leavetype
     */
    public void setLeavetype(String value) {
        setAttributeInternal(LEAVETYPE, value);
    }

    /**
     * Gets the attribute value for FromDate, using the alias name FromDate.
     * @return the value of FromDate
     */
    public Timestamp getFromDate() {
        return (Timestamp) getAttributeInternal(FROMDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for FromDate.
     * @param value value to set the FromDate
     */
    public void setFromDate(Timestamp value) {
        setAttributeInternal(FROMDATE, value);
    }

    /**
     * Gets the attribute value for ToDate, using the alias name ToDate.
     * @return the value of ToDate
     */
    public Timestamp getToDate() {
        return (Timestamp) getAttributeInternal(TODATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ToDate.
     * @param value value to set the ToDate
     */
    public void setToDate(Timestamp value) {
        setAttributeInternal(TODATE, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreationDate, using the alias name CreationDate.
     * @return the value of CreationDate
     */
    public Timestamp getCreationDate() {
        return (Timestamp) getAttributeInternal(CREATIONDATE);
    }


    /**
     * Gets the attribute value for TotLvs, using the alias name TotLvs.
     * @return the value of TotLvs
     */
    public BigDecimal getTotLvs() {
        return (BigDecimal) getAttributeInternal(TOTLVS);
    }

    /**
     * Sets <code>value</code> as the attribute value for TotLvs.
     * @param value value to set the TotLvs
     */
    public void setTotLvs(BigDecimal value) {
        setAttributeInternal(TOTLVS, value);
    }

    /**
     * Gets the attribute value for Approved, using the alias name Approved.
     * @return the value of Approved
     */
    public String getApproved() {
        return (String) getAttributeInternal(APPROVED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Approved.
     * @param value value to set the Approved
     */
    public void setApproved(String value) {
        setAttributeInternal(APPROVED, value);
    }

    /**
     * Gets the attribute value for Remarks, using the alias name Remarks.
     * @return the value of Remarks
     */
    public String getRemarks() {
        return (String) getAttributeInternal(REMARKS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Remarks.
     * @param value value to set the Remarks
     */
    public void setRemarks(String value) {
        setAttributeInternal(REMARKS, value);
    }

    /**
     * Gets the attribute value for DeptId, using the alias name DeptId.
     * @return the value of DeptId
     */
    public String getDeptId() {
        return (String) getAttributeInternal(DEPTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DeptId.
     * @param value value to set the DeptId
     */
    public void setDeptId(String value) {
        setAttributeInternal(DEPTID, value);
    }

    /**
     * Gets the attribute value for Cancel, using the alias name Cancel.
     * @return the value of Cancel
     */
    public String getCancel() {
        return (String) getAttributeInternal(CANCEL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Cancel.
     * @param value value to set the Cancel
     */
    public void setCancel(String value) {
        setAttributeInternal(CANCEL, value);
    }

    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the value of UpdatedDate
     */
    public Timestamp getUpdatedDate() {
        return (Timestamp) getAttributeInternal(UPDATEDDATE);
    }


    /**
     * Gets the attribute value for VersionNumber, using the alias name VersionNumber.
     * @return the value of VersionNumber
     */
    public BigDecimal getVersionNumber() {
        return (BigDecimal) getAttributeInternal(VERSIONNUMBER);
    }


    /**
     * @param srNo key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Long srNo) {
        return new Key(new Object[] { srNo });
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        setEmpId(new BigInteger(ADFContext.getCurrent()
                                          .getSessionScope()
                                          .get("sess_empcode")
                                          .toString()));
        setEmpCode(new Long(ADFContext.getCurrent()
                                      .getSessionScope()
                                      .get("sess_empcode")
                                      .toString()));
        setCreatedBy(ADFContext.getCurrent()
                               .getSessionScope()
                               .get("sess_empcode")
                               .toString());
        setDeptId(ADFContext.getCurrent()
                            .getSessionScope()
                            .get("sess_deptid")
                            .toString());
        if (ADFContext.getCurrent()
                      .getSessionScope()
                      .get("sess_hod")
                      .toString()
                      .equals("none")) {
            setApproved("Y");
            setCancel("N");
        } else {
            setApproved("N");
            setCancel("N");
        }
        super.doDML(operation, e);
    }


}

