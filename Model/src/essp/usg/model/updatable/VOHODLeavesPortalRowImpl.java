package essp.usg.model.updatable;


import essp.usg.model.updatable.common.VOHODLeavesPortalRow;

import java.math.BigDecimal;
import java.math.BigInteger;

import java.sql.CallableStatement;
import java.sql.Date;
import java.sql.SQLException;
import java.sql.Timestamp;

import java.sql.Types;

import oracle.adf.share.ADFContext;

import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Mar 27 16:06:12 PKT 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class VOHODLeavesPortalRowImpl extends ViewRowImpl implements VOHODLeavesPortalRow {


    public static final int ENTITY_EOHODLEAVESPORTAL = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        Approved,
        Cancel,
        CreatedBy,
        CreationDate,
        DeptId,
        EmpCode,
        EmpId,
        FromDate,
        LvTypeCode,
        Leavetype,
        Remarks,
        SrNo,
        ToDate,
        FromT,
        ToT,
        TotLvs,
        UpdatedDate,
        VersionNumber,
        Hod,
        Name,
        MailId;
        private static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int APPROVED = AttributesEnum.Approved.index();
    public static final int CANCEL = AttributesEnum.Cancel.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int DEPTID = AttributesEnum.DeptId.index();
    public static final int EMPCODE = AttributesEnum.EmpCode.index();
    public static final int EMPID = AttributesEnum.EmpId.index();
    public static final int FROMDATE = AttributesEnum.FromDate.index();
    public static final int LVTYPECODE = AttributesEnum.LvTypeCode.index();
    public static final int LEAVETYPE = AttributesEnum.Leavetype.index();
    public static final int REMARKS = AttributesEnum.Remarks.index();
    public static final int SRNO = AttributesEnum.SrNo.index();
    public static final int TODATE = AttributesEnum.ToDate.index();
    public static final int FROMT = AttributesEnum.FromT.index();
    public static final int TOT = AttributesEnum.ToT.index();
    public static final int TOTLVS = AttributesEnum.TotLvs.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();
    public static final int VERSIONNUMBER = AttributesEnum.VersionNumber.index();
    public static final int HOD = AttributesEnum.Hod.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int MAILID = AttributesEnum.MailId.index();

    /**
     * This is the default constructor (do not remove).
     */
    public VOHODLeavesPortalRowImpl() {
    }

    /**
     * Gets EOHODLeavesPortal entity object.
     * @return the EOHODLeavesPortal
     */
    public EntityImpl getEOHODLeavesPortal() {
        return (EntityImpl) getEntity(ENTITY_EOHODLEAVESPORTAL);
    }

    /**
     * Gets the attribute value for APPROVED using the alias name Approved.
     * @return the APPROVED
     */
    public String getApproved() {
        return (String) getAttributeInternal(APPROVED);
    }

    /**
     * Sets <code>value</code> as attribute value for APPROVED using the alias name Approved.
     * @param value value to set the APPROVED
     */
    public void setApproved(String value) {
        setAttributeInternal(APPROVED, value);
    }

    /**
     * Gets the attribute value for CANCEL using the alias name Cancel.
     * @return the CANCEL
     */
    public String getCancel() {
        return (String) getAttributeInternal(CANCEL);
    }

    /**
     * Sets <code>value</code> as attribute value for CANCEL using the alias name Cancel.
     * @param value value to set the CANCEL
     */
    public void setCancel(String value) {
        setAttributeInternal(CANCEL, value);
    }

    /**
     * Gets the attribute value for CREATED_BY using the alias name CreatedBy.
     * @return the CREATED_BY
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as attribute value for CREATED_BY using the alias name CreatedBy.
     * @param value value to set the CREATED_BY
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CREATION_DATE using the alias name CreationDate.
     * @return the CREATION_DATE
     */
    public Timestamp getCreationDate() {
        return (Timestamp) getAttributeInternal(CREATIONDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for CREATION_DATE using the alias name CreationDate.
     * @param value value to set the CREATION_DATE
     */
    public void setCreationDate(Timestamp value) {
        setAttributeInternal(CREATIONDATE, value);
    }

    /**
     * Gets the attribute value for DEPT_ID using the alias name DeptId.
     * @return the DEPT_ID
     */
    public String getDeptId() {
        return (String) getAttributeInternal(DEPTID);
    }

    /**
     * Sets <code>value</code> as attribute value for DEPT_ID using the alias name DeptId.
     * @param value value to set the DEPT_ID
     */
    public void setDeptId(String value) {
        setAttributeInternal(DEPTID, value);
    }

    /**
     * Gets the attribute value for EMP_CODE using the alias name EmpCode.
     * @return the EMP_CODE
     */
    public Long getEmpCode() {
        return (Long) getAttributeInternal(EMPCODE);
    }

    /**
     * Sets <code>value</code> as attribute value for EMP_CODE using the alias name EmpCode.
     * @param value value to set the EMP_CODE
     */
    public void setEmpCode(Long value) {
        setAttributeInternal(EMPCODE, value);
    }

    /**
     * Gets the attribute value for EMP_ID using the alias name EmpId.
     * @return the EMP_ID
     */
    public BigInteger getEmpId() {
        return (BigInteger) getAttributeInternal(EMPID);
    }

    /**
     * Sets <code>value</code> as attribute value for EMP_ID using the alias name EmpId.
     * @param value value to set the EMP_ID
     */
    public void setEmpId(BigInteger value) {
        setAttributeInternal(EMPID, value);
    }

    /**
     * Gets the attribute value for FROM_DATE using the alias name FromDate.
     * @return the FROM_DATE
     */
    public Timestamp getFromDate() {
        return (Timestamp) getAttributeInternal(FROMDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for FROM_DATE using the alias name FromDate.
     * @param value value to set the FROM_DATE
     */
    public void setFromDate(Timestamp value) {
        setAttributeInternal(FROMDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LvTypeCode.
     * @return the LvTypeCode
     */
    public String getLvTypeCode() {
        return (String) getAttributeInternal(LVTYPECODE);
    }

    /**
     * Gets the attribute value for LEAVETYPE using the alias name Leavetype.
     * @return the LEAVETYPE
     */
    public String getLeavetype() {
        return (String) getAttributeInternal(LEAVETYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for LEAVETYPE using the alias name Leavetype.
     * @param value value to set the LEAVETYPE
     */
    public void setLeavetype(String value) {
        setAttributeInternal(LEAVETYPE, value);
    }

    /**
     * Gets the attribute value for REMARKS using the alias name Remarks.
     * @return the REMARKS
     */
    public String getRemarks() {
        return (String) getAttributeInternal(REMARKS);
    }

    /**
     * Sets <code>value</code> as attribute value for REMARKS using the alias name Remarks.
     * @param value value to set the REMARKS
     */
    public void setRemarks(String value) {
        setAttributeInternal(REMARKS, value);
    }

    /**
     * Gets the attribute value for SR_NO using the alias name SrNo.
     * @return the SR_NO
     */
    public Long getSrNo() {
        return (Long) getAttributeInternal(SRNO);
    }

    /**
     * Sets <code>value</code> as attribute value for SR_NO using the alias name SrNo.
     * @param value value to set the SR_NO
     */
    public void setSrNo(Long value) {
        setAttributeInternal(SRNO, value);
    }

    /**
     * Gets the attribute value for TO_DATE using the alias name ToDate.
     * @return the TO_DATE
     */
    public Timestamp getToDate() {
        return (Timestamp) getAttributeInternal(TODATE);
    }

    /**
     * Sets <code>value</code> as attribute value for TO_DATE using the alias name ToDate.
     * @param value value to set the TO_DATE
     */
    public void setToDate(Timestamp value) {
        setAttributeInternal(TODATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FromT.
     * @return the FromT
     */
    public String getFromT() {
        return (String) getAttributeInternal(FROMT);
    }

    /**
     * Gets the attribute value for the calculated attribute ToT.
     * @return the ToT
     */
    public String getToT() {
        return (String) getAttributeInternal(TOT);
    }

    /**
     * Gets the attribute value for TOT_LVS using the alias name TotLvs.
     * @return the TOT_LVS
     */
    public BigDecimal getTotLvs() {
        return (BigDecimal) getAttributeInternal(TOTLVS);
    }

    /**
     * Sets <code>value</code> as attribute value for TOT_LVS using the alias name TotLvs.
     * @param value value to set the TOT_LVS
     */
    public void setTotLvs(BigDecimal value) {
        setAttributeInternal(TOTLVS, value);
    }

    /**
     * Gets the attribute value for UPDATED_DATE using the alias name UpdatedDate.
     * @return the UPDATED_DATE
     */
    public Timestamp getUpdatedDate() {
        return (Timestamp) getAttributeInternal(UPDATEDDATE);
    }

    /**
     * Gets the attribute value for VERSION_NUMBER using the alias name VersionNumber.
     * @return the VERSION_NUMBER
     */
    public BigDecimal getVersionNumber() {
        return (BigDecimal) getAttributeInternal(VERSIONNUMBER);
    }

    /**
     * Sets <code>value</code> as attribute value for VERSION_NUMBER using the alias name VersionNumber.
     * @param value value to set the VERSION_NUMBER
     */
    public void setVersionNumber(BigDecimal value) {
        setAttributeInternal(VERSIONNUMBER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Hod.
     * @return the Hod
     */
    public BigDecimal getHod() {
        return (BigDecimal) getAttributeInternal(HOD);
    }

    /**
     * Gets the attribute value for the calculated attribute Name.
     * @return the Name
     */
    public String getName() {
        return (String) getAttributeInternal(NAME);
    }

    /**
     * Gets the attribute value for the calculated attribute MailId.
     * @return the MailId
     */
    public String getMailId() {
        return (String) getAttributeInternal(MAILID);
    }

    public void sendNotification(String action, String empCode, String emailID, Date fromDate,String name) {
        CallableStatement cst = null;
        if (action.equals("REJECT")) {
            System.out.println("REJECT NOTIFICATION:(" + empCode + "," + emailID + "," + fromDate + ")");

            try {
                cst = getDBTransaction().createCallableStatement("{call USPR.AUTO_MAIL_LEAVES_R(?,?,?,?)}", 0);
                cst.setString(1, empCode);
                cst.setString(2, emailID);
                cst.setString(3, "");
                cst.setDate(4, fromDate);
                cst.executeUpdate();
                System.out.println("notification sent");
            } catch (Exception ex) {
                ex.printStackTrace();
            } finally {
                try {
                    cst.close();
                } catch (SQLException e) {
                }
            }
        } else if (action.equals("ACCEPT")) {
            System.out.println("ACCEPT NOTIFICATION:(" + empCode + "," + emailID + "," + fromDate + ")");

            try {
                cst = getDBTransaction().createCallableStatement("{call USPR.AUTO_MAIL_LEAVES_APPPROVED(?,?,?,?,?)}", 0);
                cst.setString(1, empCode);
                cst.setString(2, emailID);
                cst.setString(3, "");
                cst.setDate(4, fromDate);
                cst.setString(5,name);
                cst.executeUpdate();
                System.out.println("notification sent");
            } catch (Exception ex) {
                ex.printStackTrace();
            } finally {
                try {
                    cst.close();
                } catch (SQLException e) {
                }
            }
        }
    }
}

